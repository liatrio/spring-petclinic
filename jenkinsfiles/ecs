#!groovy
// Assumes that there is an AWS EC2 key pair with the id ecs
pipeline {
	agent {
		docker {
			image 'liatrio/ecs-cli'
			args  '-u 0:0'
		}
	}
	stages {
		stage('Build') {
			agent {
				docker {
					image 'maven:3.5.0'
					args '-e INITIAL_ADMIN_USER -e INITIAL_ADMIN_PASSWORD --network=${LDOP_NETWORK_NAME}'
				}
			}
			steps {
				configFileProvider(
					[configFile(fileId: 'nexus', variable: 'MAVEN_SETTINGS')]) {
					sh 'mvn -s $MAVEN_SETTINGS clean install -DskipTests=true -B'
					}
			}
		}
		stage('Create ECS Cluster') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
					sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
					sh "ecs-cli up --force --keypair ecs --capability-iam --size 3 --instance-type t2.micro"
				}
			}
		}
		stage('Deploy to ECS DEV') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
					sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
					sh "ecs-cli compose --project-name spring-petclinic-dev --file ecs-compose.yml up"
					sh """ecs-cli ps | grep -m 1 dev | awk -F'RUNNING  |:' '{print \"DEV URL: http://\"\$2\"/petclinic\"}'"""
				}
			}
		}
		stage('Deploy to ECS QA') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
					sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
					sh "ecs-cli compose --project-name spring-petclinic-qa --file ecs-compose.yml up"
					sh """ecs-cli ps | grep -m 1 qa | awk -F'RUNNING  |:' '{print \"QA URL: http://\"\$2\"/petclinic\"}'"""
					input 'Deploy to ECS Production?'
				}
			}
		}
		stage('Deploy to ECS PROD') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
					sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
					sh "ecs-cli compose --project-name spring-petclinic-prod --file ecs-compose.yml up"
					sh """ecs-cli ps | grep -m 1 prod | awk -F'RUNNING  |:' '{print \"PROD URL: http://\"\$2\"/petclinic\"}'"""
				}
			}
		}
		stage('Output Results') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
					sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
					sh """ecs-cli ps | grep -m 1 dev | awk -F'RUNNING  |:' '{print \"DEV URL: http://\"\$2\"/petclinic\"}'"""
					sh """ecs-cli ps | grep -m 1 qa | awk -F'RUNNING  |:' '{print \"QA URL: http://\"\$2\"/petclinic\"}'"""
					sh """ecs-cli ps | grep -m 1 prod | awk -F'RUNNING  |:' '{print \"PROD URL: http://\"\$2\"/petclinic\"}'"""
					echo "To delete resources allocated run: ecs-cli down --force"
				}
			}
		}
	}
}
