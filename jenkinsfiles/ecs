#!groovy
// Assumes that there is an AWS EC2 key pair with the id ecs
pipeline {
  agent none
  stages {
    stage('Build') {
      agent {
        docker {
          image 'maven:3.5.0'
          args '-e INITIAL_ADMIN_USER -e INITIAL_ADMIN_PASSWORD --network=${LDOP_NETWORK_NAME}'
        }
      }
      steps {
        configFileProvider(
          [configFile(fileId: 'nexus', variable: 'MAVEN_SETTINGS')]) {
          sh 'mvn -s $MAVEN_SETTINGS clean install -DskipTests=true -B'
          }
      }
    }
    stage('Create ECS Cluster') {
      agent {
        docker {
          image 'liatrio/ecs-cli'
          args  '-u 0:0'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
          sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
          sh "ecs-cli up --force --keypair ecs --capability-iam --size 3 --instance-type t2.micro"
        }
      }
    }
    stage('Deploy to ECS DEV') {
      agent {
        docker {
          image 'liatrio/ecs-cli'
          args  '-u 0:0'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
          sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
          sh "ecs-cli compose --project-name spring-petclinic-dev --file ecs-compose.yml up"
          echo "Should be accessible at DEV URL"
        }
      }
    }
    stage('Deploy to ECS QA') {
      agent {
        docker {
          image 'liatrio/ecs-cli'
          args  '-u 0:0'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
          sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
          sh "ecs-cli compose --project-name spring-petclinic-qa --file ecs-compose.yml up"
          echo "Should be accessible at QA URL"
          input 'Deploy to ECS Production?'
        }
      }
    }
    stage('Deploy to ECS PROD') {
      agent {
        docker {
          image 'liatrio/ecs-cli'
          args  '-u 0:0'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'ECS', passwordVariable: 'awsSecret', usernameVariable: 'awsAccess')]){
          sh "ecs-cli configure --region us-west-2 --access-key ${env.awsAccess} --secret-key ${env.awsSecret} --cluster petclinic-cluster"
          sh "ecs-cli compose --project-name spring-petclinic-prod --file ecs-compose.yml up"
          echo "Should be accessible at PROD URL"
        }
      }
    }
  }
}
